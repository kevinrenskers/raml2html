#!/usr/bin/env node

'use strict';

const fs = require('fs');
const yargs = require('yargs');
const colors = require('colors');
const path = require('path');
const raml2html = require('..');
const pjson = require('../package.json');

const argv = yargs
  .usage('Usage: raml2html [options] [RAML input file]')
  .version(pjson.version)
  .alias('i', 'input')
  .alias('o', 'output')
  .alias('t', 'template')
  .alias('p', 'pretty')
  .alias('v', 'validate')
  .alias('h', 'help')
  .help('h')
  .string('i')
  .string('o')
  .string('t')
  .string('theme')
  .boolean('v')
  .boolean('p')
  .describe('i', 'Input file')
  .describe('o', 'Output file')
  .describe('t', 'Template path')
  .describe('v', 'Validate RAML and examples (off by default)')
  .describe('p', 'Make the output file pretty (readable)')
  .describe('theme', 'Theme name')
  .example('raml2html example.raml > example.html')
  .example(
    'raml2html --theme raml2html-markdown-theme example.raml > example.html'
  )
  .example(
    'raml2html --template my-template.nunjucks -i example.raml -o example.html'
  ).argv;

let input = argv.input;

if (!input) {
  if (argv._.length !== 1) {
    console.error('Error: You need to specify the RAML input file\n');
    yargs.showHelp();
    process.exit(1);
  }

  input = argv._[0];
}

let config;
if (argv.template) {
  config = raml2html.getConfigForTemplate(argv.template);
} else {
  config = raml2html.getConfigForTheme(argv.theme, argv);
}

function writeOutput(result, config, argv) {
  return new Promise((resolve, reject) => {
    if (argv.output) {
      fs.writeFile(argv.output, result, err => {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    } else {
      // Simply output to console
      process.stdout.write(result);
      resolve();
    }
  });
}

function issueSrc(issue) {
  return `${path.join(path.dirname(input), issue.path)}:${issue.range.start.line}:${issue.range.start.column}`;
}

function reportParserErrors(parserErrors) {
  parserErrors.forEach(issue => {
    const src = issueSrc(issue);
    var stackTrace = ""
    if (issue.trace) {
      stackTrace = "\n  " + issue.trace.map(issueSrc).join("\n  ");
    }
    if (issue.isWarning) {
      console.log(`[${src}] ${colors.yellow('WARNING')} ${colors.yellow(issue.message)}${stackTrace}`);
    } else {
      console.log(`[${src}] ${colors.red('ERROR')} ${colors.red(issue.message)}${stackTrace}`);
    }
  });
}

// Start the rendering process
raml2html
  .render(input, config, argv)
  .then(result => {
    return (config.writeOutput || writeOutput)(result, config, argv);
  })
  .then(() => process.exit(0))
  .catch(error => {
    if (error.message) {
      console.error(error.message);
    }
    if (error.parserErrors) {
      reportParserErrors(error.parserErrors);
    }
    process.exit(1);
  });
